# frozen_string_literal: true

# credit: @BobbyMcWho https://gist.github.com/BobbyMcWho/3ce09bde5abb674e61092efbe7390ffb

require 'octokit'

class VulnerabilityFetcher
  attr_reader :packages, :package_manager, :public_github_token, :package_name_map

  def initialize(packages, package_manager, public_github_token)
    @packages = packages
    @package_manager = package_manager
    @public_github_token = public_github_token
    @package_name_map = {}
  end

  def fetch_advisories
    fetch_github_advisories
  end

  private

  def fetch_github_advisories
    packages_mapping(packages)
    response = client.post('/graphql', { query: query(package_name_map, package_manager) }.to_json)
    format_github_advisories(response)
  end

  def format_github_advisories(raw_response)
    advisories = {}
    raw_response[:data]&.each do |key, val|
      advisories[package_name_map[key.to_s].to_sym] = val[:vulnerabilities].map do |v|
        if v.advisory.identifiers.find{ |a| a.type == 'CVE' }.nil?
          nil
        else
          {
          patched_versions: ['>=' + v.first_patched_version.identifier],
          vulnerable_versions: [v.vulnerable_version_range],
          cve_id: v.advisory.identifiers.find{ |a| a.type == 'CVE' }.id,
          url: v.advisory.references.first[:url],
          summary: v.advisory.summary
          }
        end
      end.compact
    end
    advisories
  end

  def client
    @client ||= Octokit::Client.new(access_token: public_github_token)
  end

  def query(package_name_map, package_manager)
    query = "query {\n"
    package_name_map.each do |formatted_package_name, package|
      query += <<~PACKAGE_QUERY
        #{formatted_package_name}: securityVulnerabilities(
          ecosystem: #{ecosystem_for(package_manager)},
          package: "#{package}",
          first: 100
        ) {
          vulnerabilities: nodes {
            vulnerable_version_range: vulnerableVersionRange
            first_patched_version: firstPatchedVersion {
              identifier: identifier
            }
            advisory {
              identifiers {
                type: type
                id: value
              }
              summary
              references {
                url
              }
            }
          }
        }\n
      PACKAGE_QUERY
    end
    query += "}"
  end

  ECOSYSTEMS = {
    "npm_and_yarn" => "NPM"
  }.freeze
  def ecosystem_for(package_manager)
    ECOSYSTEMS[package_manager]
  end

  def packages_mapping(packages)
    counter = 0
    packages.each do |package|
      package_name_map["package" + counter.to_s] = package
      counter += 1
    end
  end
end